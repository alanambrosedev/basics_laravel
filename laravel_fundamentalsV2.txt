Eloquent ORM
============

Retrieving record via Eloquent
------------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can retrieve records using Eloquent:

1. **Find a record by its primary key**:

$user = User::find(1); // Finds the User with an ID of 1

2. **Find records by a specific attribute**:

$users = User::where('status', 'active')->get(); // Retrieves all users with the status 'active'

3. **Retrieve all records**:

$allUsers = User::all(); // Retrieves all users

4. **Conditional retrieval**:

$activeUsers = User::where('account_active', 1)->get(); // Retrieves all users where 'account_active' is 1

5. **Using dynamic finders**:

$user = User::whereEmail('john@example.com')->first(); // Retrieves the first user with the email 'john@example.com'

Using where condition in Eloquent
---------------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can use the `where` condition in Eloquent:

1. **Basic where clause**:

$users = User::where('votes', '>', 100)->get();

This will retrieve all users that have more than 100 votes.

2. **Multiple where clauses**:

$users = User::where('votes', '>', 100)->where('name', 'John')->get();

This will retrieve all users that have more than 100 votes and their name is John.

3. **Or where clause**:

$users = User::where('votes', '>', 100)->orWhere('name', 'John')->get();

This will retrieve all users that have more than 100 votes or their name is John.

4. **Where clause with a closure**:

$users = User::where(function ($query) {
    $query->where('votes', '>', 100)
          ->orWhere('name', 'John');
})->get();

Inserting & saving with Eloquent
--------------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can insert and save records using Eloquent:

1. **Inserting a new record**:

$user = new User;
$user->name = 'John';
$user->email = 'john@example.com';
$user->save();

This will create a new instance of the User model, set the `name` and `email` attributes, and then save it to the database.

2. **Mass assignment**:

$user = User::create(['name' => 'John', 'email' => 'john@example.com']);

This will create a new instance of the User model and save it to the database in one operation. Note that for this to work, you need to specify the `name` and `email` fields in the `$fillable` property of the User model.

3. **Updating a record**:

$user = User::find(1);
$user->email = 'newjohn@example.com';
$user->save();

This will find the User with an ID of 1, update the `email` attribute, and then save the changes to the database.


Updating with Eloquent
----------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can update records using Eloquent:

1. **Updating a record**:

$user = User::find(1);
$user->name = 'New Name';
$user->save();

This will find the User with an ID of 1, update the `name` attribute, and then save the changes to the database.

2. **Mass update**:

User::where('account_active', 1)->update(['account_active' => 0]);

This will update all users where 'account_active' is 1 and set 'account_active' to 0.

3. **Update or create**:

$matchThese = ['shopId' => $theID, 'metadataKey' => 2001];
ShopMeta::updateOrCreate($matchThese, ['shopOwner' => 'New One']);

This will update the `shopOwner` field if a ShopMeta record exists with `shopId` equal to `$theID` and `metadataKey` equal to 2001. If such a record does not exist, it will create a new one with these values.

Deleting with Eloquent
----------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can delete records using Eloquent:

1. **Deleting a record by its primary key**:

$user = User::find(1);
$user->delete();

This will find the User with an ID of 1 and delete it.

2. **Deleting multiple records by their primary keys**:

User::destroy([1, 2, 3]);

This will delete the Users with IDs 1, 2, and 3.

3. **Deleting records by a specific attribute**:

User::where('account_active', 0)->delete();

This will delete all users where 'account_active' is 0.

4. **Deleting a record using a model instance**:

$note = Note::findOrFail($id);
$note->delete();

This will find the Note with a specific ID and delete it.

Mass assignment
---------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can use mass assignment in Laravel:

1. **Creating a new record**:

$user = User::create([
    'name' => 'John Doe',
    'email' => 'john.doe@example.com',
    'password' => bcrypt('password'),
]);

This will create a new instance of the User model and save it to the database in one operation. Note that for this to work, you need to specify the `name`, `email`, and `password` fields in the `$fillable` property of the User model.

2. **Updating a record**:

$user = User::find(1);
$user->update([
    'name' => 'New Name',
    'email' => 'new.email@example.com',
]);

This will find the User with an ID of 1, update the `name` and `email` attributes, and then save the changes to the database.

Soft deleting / trashing
------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can use soft deleting (also known as trashing) in Laravel:

1. **Implementing Soft Deletes**:
To enable soft deletes for a model, use the `Illuminate\Database\Eloquent\SoftDeletes` trait and add the `deleted_at` column to your `$dates` property on the model:

<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Model
{
    use SoftDeletes;

    protected $dates = ['deleted_at'];
}

This will add a `deleted_at` attribute to your model, which is automatically managed by Eloquent.

2. **Soft Deleting a Model**:
To soft delete a model, call the `delete` method on the instance:

$user = User::find(1);
$user->delete();

This will set the `deleted_at` attribute on the model and save it to the database.

3. **Checking if a Model has been Soft Deleted**:
To check if a model has been soft deleted, use the `trashed` method:

if ($user->trashed()) {
    //
}

This will return `true` if the model's `deleted_at` column is not null.

4. **Retrieving Soft Deleted Models**:
To retrieve soft deleted models, use the `onlyTrashed` method:

$users = User::onlyTrashed()->get();

This will retrieve all users that have been soft deleted.

5. **Restoring Soft Deleted Models**:
To restore a soft deleted model, use the `restore` method:

$user->restore();

This will set the model's `deleted_at` column to null.

6. **Permanently Deleting Models**:
To permanently delete a model, use the `forceDelete` method:

$user->forceDelete();

This will permanently delete the model from the database.

Retrieving deleted record
-------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can retrieve deleted (soft deleted) records in Laravel:

1. **Retrieving Soft Deleted Models**:

$users = User::onlyTrashed()->get();

This will retrieve all users that have been soft deleted.

2. **Checking if a Model has been Soft Deleted**:

if ($user->trashed()) {
    //
}

This will return `true` if the model's `deleted_at` column is not null.

3. **Restoring Soft Deleted Models**:

$user->restore();

This will set the model's `deleted_at` column to null.

4. **Retrieving and Restoring Soft Deleted Models**:

User::onlyTrashed()->where('user_id', 1)->restore();

This will restore all deleted records from the users table where the value of column `user_id` equals to 1.

Deleting a record permanently
-----------------------------

Laravel's Eloquent ORM provides a simple and fluent way to work with your database. Here are some examples of how you can permanently delete records in Laravel:

1. **Deleting a record by its primary key**:

$user = User::find(1);
$user->delete();

This will find the User with an ID of 1 and delete it.

2. **Deleting multiple records by their primary keys**:

User::destroy([1, 2, 3]);

This will delete the Users with IDs 1, 2, and 3.

3. **Deleting records by a specific attribute**:

User::where('account_active', 0)->delete();

This will delete all users where 'account_active' is 0.

4. **Permanently deleting a soft deleted record**:

YourModel::onlyTrashed()->where('condition', 'value')->forceDelete();

This will permanently delete a soft deleted record from your database, not just mark it as deleted.

Factories
---------

Factories in Laravel are classes that generate fake data for your database tables. They're particularly useful when testing your application or seeding your database. Here's how you can use factories in Laravel:

1. **Defining a Factory**:
Factories are defined in the `database/factories` directory. A factory is a class that extends Laravel's base factory class and defines a `definition` method. This method returns the default set of attribute values that should be applied when creating a model using the factory.

Here's an example of a factory definition for a `User` model:

namespace Database\Factories;

use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Factories\Factory;

class UserFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => $this->faker->name(),
            'email' => $this->faker->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
        ];
    }
}

In this example, the `definition` method returns an array of attribute values to be assigned to the model. The `faker` property provides access to the Faker PHP library, which generates various kinds of random data.

2. **Generating Records with a Factory**:
You can use a factory to generate new records for a model. Here's an example of how to create a new `User` record using a factory:

$user = User::factory()->create();

This will create a new `User` record in the database with attribute values defined by the `UserFactory`.

3. **Generating Multiple Records**:
You can also use a factory to generate multiple records at once. Here's how to create 50 `User` records:

$users = User::factory()->count(50)->create();

This will create 50 new `User` records in the database.

Eloquent Relationship
=====================

In Laravel, a one-to-one relationship is a very basic relation that links one model instance with another. For example, a `User` model might be associated with one `Phone` model. Here's how you can define and use a one-to-one relationship in Laravel:

1. **Defining a One-to-One Relationship**:
In the model, you can define a one-to-one relationship using the `hasOne` method. For example, in the `User` model, you can define a relationship to the `Phone` model like this:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    public function phone()
    {
        return $this->hasOne('App\Models\Phone');
    }
}
```
In this example, the `phone` method returns the relationship definition. The `'App\Models\Phone'` argument passed to the `hasOne` method is the name of the related model.

2. **Defining the Inverse of the Relationship**:
In the related model, you can define an inverse of the relationship using the `belongsTo` method. For example, in the `Phone` model, you can define a relationship to the `User` model like this:


namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Phone extends Model
{
    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }
}

In this example, the `user` method returns the relationship definition. The `'App\Models\User'` argument passed to the `belongsTo` method is the name of the related model.

3. **Accessing the Related Model**:
You can access the related model using the defined relationship method. For example, to access the `Phone` model associated with a `User` model, you can do this:


$phone = User::find(1)->phone;

In this example, `User::find(1)` retrieves the `User` model with an ID of 1, and `->phone` accesses the related `Phone` model.

One to many relationship
------------------------

In Laravel, a one-to-many relationship is a type of relationship where a record in one model can have multiple corresponding records in another model. For example, a `User` model might be associated with multiple `Post` models. Here's how you can define and use a one-to-many relationship in Laravel:

1. **Defining a One-to-Many Relationship**:
In the model, you can define a one-to-many relationship using the `hasMany` method. For example, in the `User` model, you can define a relationship to the `Post` model like this:


namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    public function posts()
    {
        return $this->hasMany('App\Models\Post');
    }
}

In this example, the `posts` method returns the relationship definition. The `'App\Models\Post'` argument passed to the `hasMany` method is the name of the related model.

2. **Defining the Inverse of the Relationship**:
In the related model, you can define an inverse of the relationship using the `belongsTo` method. For example, in the `Post` model, you can define a relationship to the `User` model like this:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }
}

In this example, the `user` method returns the relationship definition. The `'App\Models\User'` argument passed to the `belongsTo` method is the name of the related model.

3. **Accessing the Related Models**:
You can access the related models using the defined relationship method. For example, to access the `Post` models associated with a `User` model, you can do this:


$posts = User::find(1)->posts;

In this example, `User::find(1)` retrieves the `User` model with an ID of 1, and `->posts` accesses the related `Post` models.


Many to many relationship
-------------------------

In Laravel, a many-to-many relationship is a type of relationship where multiple records in one model can have multiple corresponding records in another model. For example, a `User` model might be associated with multiple `Role` models through a pivot table. Here's how you can define and use a many-to-many relationship in Laravel:

1. **Defining a Many-to-Many Relationship**:
In the model, you can define a many-to-many relationship using the `belongsToMany` method. For example, in the `User` model, you can define a relationship to the `Role` model like this:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    public function roles()
    {
        return $this->belongsToMany('App\Models\Role');
    }
}

In this example, the `roles` method returns the relationship definition. The `'App\Models\Role'` argument passed to the `belongsToMany` method is the name of the related model.

2. **Defining the Inverse of the Relationship**:
In the related model, you can define an inverse of the relationship using the `belongsToMany` method. For example, in the `Role` model, you can define a relationship to the `User` model like this:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    public function users()
    {
        return $this->belongsToMany('App\Models\User');
    }
}

In this example, the `users` method returns the relationship definition. The `'App\Models\User'` argument passed to the `belongsToMany` method is the name of the related model.

3. **Accessing the Related Models**:
You can access the related models using the defined relationship method. For example, to access the `Role` models associated with a `User` model, you can do this:

$roles = User::find(1)->roles;

In this example, `User::find(1)` retrieves the `User` model with an ID of 1, and `->roles` accesses the related `Role` models.

File Storage
============

In Laravel, file storage is handled by the Laravel Storage API, which provides a simple and unified API for interacting with various storage systems such as local disk, Amazon S3, FTP, and more.

Here's how you can use file storage in Laravel:

1. **Storing a File**:
To store a file, you can use the `put` method:


use Illuminate\Support\Facades\Storage;

Storage::put('file.txt', 'Contents');

This will create a file named `file.txt` with the content 'Contents'.

2. **Retrieving a File**:
To retrieve a file, you can use the `get` method:

$contents = Storage::get('file.txt');

This will retrieve the contents of `file.txt`.

3. **Specifying a Disk**:
You can specify the disk when performing file operations using the `disk` method:

Storage::disk('local')->put('explorers.txt', 'The first explorers to visit the moon and Mars');
This will create a file called `explorers.txt` with the specified content in the local disk.

4. **File Visibility**:
You can set the visibility of a file to public or private using the `setVisibility` method:

Storage::setVisibility('file.txt', 'public');

This will set the visibility of `file.txt` to public.

5. **Deleting a File**:
To delete a file, you can use the `delete` method:

Storage::delete('file.txt');

This will delete `file.txt`.

Uploading files in Storage
--------------------------

In Laravel, you can handle file uploads using the Laravel's built-in Storage API. Here's a step-by-step guide on how to upload files in Laravel:

1. **Create a Laravel Project**:
You can create a new Laravel project using the Laravel installer or Composer:

laravel new projectName
# or
composer create-project --prefer-dist laravel/laravel projectName

2. **Set Up Database Connection**:
Define your database connection in your `.env` file:

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database
DB_USERNAME=your_username
DB_PASSWORD=your_password

3. **Create a Model and Migration**:
You can create a model and migration file using the `make:model` Artisan command:

php artisan make:model File -m

4. **Define the Model and Migration**:
In your `File` model, define the fillable fields:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class File extends Model
{
    protected $fillable = ['path'];
}

In your migration file, define the structure of your `files` table:

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFilesTable extends Migration
{
    public function up()
    {
        Schema::create('files', function (Blueprint $table) {
            $table->id();
            $table->string('path');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('files');
    }
}

5. **Create a File Upload Form**:
In your Blade view, you can create a form for file uploads:

<form action="/upload" method="post" enctype="multipart/form-data">
    @csrf
    <input type="file" name="file">
    <button type="submit">Upload</button>
</form>

6. **Handle the File Upload**:
In your controller, you can handle the file upload:

public function upload(Request $request)
{
    $path = $request->file('file')->store('uploads');

    File::create([
        'path' => $path
    ]);

    return back()->with('success', 'File uploaded successfully.');
}

In this example, the `store` method will store the uploaded file in the `storage/app/uploads` directory.

Storage link
------------

In Laravel, the `storage:link` Artisan command is used to create a symbolic link from `public/storage` to `storage/app/public`. This allows you to access files in the `storage/app/public` directory via a link like `http://yourdomain.com/storage/image.jpg`.

Here's how you can use the `storage:link` command:

1. **Creating a Symbolic Link**:
Open a terminal and navigate to your Laravel project directory. Run the following command:

php artisan storage:link

This command creates a symbolic link from `public/storage` to `storage/app/public`.

2. **Accessing Files**:
After creating the symbolic link, any file in `storage/app/public` can be accessed via a link like `http://yourdomain.com/storage/image.jpg`.

3. **Handling Permission Issues**:
If you encounter a permission issue while creating the symbolic link, you may need to change the permissions of the `storage` directory:

chmod 777 -R storage
chown -R www-data:www-data storage

4. **Creating a Symbolic Link Programmatically**:
If you want to create the symbolic link programmatically, you can use the `Artisan::call` method in a route:

Route::get('/foo', function () {
    Artisan::call('storage:link');
});


This route will run the `storage:link` command when you access `http://yourdomain.com/foo`.

Remove files from storage
-------------------------

In Laravel, you can remove files from storage using the `Storage` facade's `delete` method. Here's how you can do it:

1. **Import the Storage Facade**:
At the top of your file, import the Storage facade:

use Illuminate\Support\Facades\Storage;

2. **Delete a Single File**:
To delete a single file, use the `delete` method:

Storage::delete('path/to/file');
Replace `'path/to/file'` with the actual path to the file you want to delete.

3. **Delete Multiple Files**:
To delete multiple files at once, you can pass an array of file paths to the `delete` method:

Storage::delete(['path/to/file1', 'path/to/file2']);

4. **Delete a File from a Specific Disk**:
If necessary, you may specify the disk that the file should be deleted from:

Storage::disk('s3')->delete('folder_path/file_name.jpg');

5. **Delete a Directory**:
Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:

Storage::deleteDirectory($directory);

Remember to replace `'path/to/file'`, `'path/to/file1'`, `'path/to/file2'`, `'s3'`, `'folder_path/file_name.jpg'`, and `$directory` with the actual paths of your files and directories.

Validating uploaded file,size,type
---------------------------------- 

In Laravel, you can validate uploaded files for size, type, and other properties using Laravel's built-in validation rules in your controller methods. Here's how you can do it:

1. **Import the necessary classes**:
At the top of your controller file, import the necessary classes:

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

2. **Define a method to handle the file upload**:
In your controller, define a method to handle the file upload:

public function upload(Request $request)
{
    $validator = Validator::make($request->all(), [
        'file' => 'required|file|max:2048|mimes:jpg,jpeg,png,doc,docx,pdf',
    ]);

    if ($validator->fails()) {
        return back()->withErrors($validator);
    } else {
        // Handle the file upload...
    }
}

In this example, the `Validator::make` method is used to create a new validator instance. The second argument to this method is an array of validation rules.

The validation rules for the file are as follows:

- `'required'`: The file must be present in the request.
- `'file'`: The uploaded file must be a valid file instance.
- `'max:2048'`: The file size must not exceed 2048 kilobytes.
- `'mimes:jpg,jpeg,png,doc,docx,pdf'`: The file type must be one of the specified MIME types.

If the validation fails, the user will be redirected back to the previous page with the validation errors. Otherwise, you can handle the file upload.

Remember to replace `'file'`, `'required'`, `'file'`, `'max:2048'`, `'mimes:jpg,jpeg,png,doc,docx,pdf'`, and `'Handle the file upload...'` with the actual names of your file input, validation rules, and file handling code.

Request & Response
==================

In Laravel, you can use the `redirect()` function to redirect the user to different pages. Here are some examples:

**1. Basic Redirects:**

return redirect('home');

This will redirect the user to the 'home' route.

**2. Redirecting With Flashed Session Data:**

return redirect('dashboard')->with('status', 'Profile updated!');

In this example, the user will be redirected to the 'dashboard' route with a flashed session variable 'status', which contains the message 'Profile updated!'.

**3. Redirecting to Named Routes:**
If you have a named route, you can redirect to it using its name:

return redirect()->route('login');

This will redirect the user to the 'login' route.

**4. Redirecting to Controller Actions:**
If you prefer to use controller actions instead of named routes, you can use the `action` method:

return redirect()->action('HomeController@index');

This will redirect the user to the 'index' method of the 'HomeController'.

**5. Redirecting to External Domains:**
For redirecting to external domains, you can use the `away` method:

return redirect()->away('https://www.google.com');

This will redirect the user to 'https://www.google.com'.

Remember, the `redirect()` function provides a quick way to send the user to a different location. However, make sure the routes or controller actions you're redirecting to actually exist to avoid any errors.

Return Response as json
-----------------------

In Laravel, you can use the `response()` function to return a response and convert it into JSON format. Here are some examples:

**1. Basic JSON Response:**

return response()->json(['name' => 'John Doe', 'state' => 'CA']);

This will return a JSON response containing a name and state.

**2. JSON Response with Status Code:**

return response()->json(['error' => 'Unauthorized'], 401);

In this example, a JSON response is returned with an 'error' message and a 401 HTTP status code.

**3. JSON Response from an Array or Collection:**

$users = User::all();
return response()->json($users);

This will return a JSON response containing all users.

**4. Adding Additional Data to JSON Response:**

return response()->json([
    'data' => $data,
    'meta' => ['key' => 'value'],
]);

In this example, additional meta data is added to the JSON response.

Remember, the `response()->json()` method will automatically set the `Content-Type` header to `application/json`, as well as convert the given array into JSON using the `json_encode` PHP function.

Return file to Download
-----------------------

In Laravel, you can use the `response()->download()` or `Storage::download()` methods to return a file for the user to download. Here are some examples:

**1. Basic File Download:**

return response()->download($pathToFile);

This will download the file at the path specified by `$pathToFile`.

**2. File Download with a Custom File Name:**

return response()->download($pathToFile, $name);

In this example, the file will be downloaded with the name specified by `$name`.

**3. File Download with Custom Headers:**

return response()->download($pathToFile, $name, $headers);

This will download the file with the custom headers specified by `$headers`.

**4. File Download Using Storage Facade:**

return Storage::download('file.jpg');

This will download the file 'file.jpg' from the storage disk.

**5. File Download Using Storage Facade with a Custom File Name:**

return Storage::download('file.jpg', $name);

This will download the file 'file.jpg' with a custom name.

**6. File Download Using Storage Facade with Custom Headers:**

return Storage::download('file.jpg', $name, $headers);

This will download the file 'file.jpg' with a custom name and headers.

Remember, the `download` method will automatically set the necessary response headers to force the client's browser to download the file rather than displaying it. If you want to display the file in the browser instead of downloading it, you can use the `response()->file()` method. Also, make sure the file you're trying to download exists to avoid any errors.

CRUD
====

Retrieving all data
-------------------

Here's how you can retrieve all data from a database table using Laravel's Eloquent ORM in a controller:

Firstly, you need to have a model that corresponds to your table. For example, if you have a `users` table, you should have a `User` model. If you don't have one, you can create it using the `make:model` Artisan command:

php artisan make:model User

This will create a `User` model in your `app` directory.

Next, you need to create a controller. You can do this using the `make:controller` Artisan command:

php artisan make:controller UserController


This will create a `UserController` in your `app/Http/Controllers` directory.

Once you have your model and controller, you can use them to retrieve all records from the corresponding table. Here's how you can do it in your controller:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function index()
    {
        $users = User::all();

        return view('user.index', ['users' => $users]);
    }
}


In this example, `User::all()` retrieves all records from the `users` table and returns them as a collection of `User` instances. The `index` method of the `UserController` retrieves all users and passes them to a view.

The `view` function returns a view of the given name. In this case, it's looking for a view file located at `resources/views/user/index.blade.php`. The second parameter is an array of data that should be made available to the view. In this case, it's passing the `$users` variable to the view.

In your `resources/views/user/index.blade.php` view file, you can then loop through the `$users` variable and display the data:


@foreach ($users as $user)
    <p>{{ $user->name }}</p>
@endforeach

Updating specific data
----------------------

Here's how you can update a specific row in a database table using Laravel's Eloquent ORM in a controller:

Firstly, you need to retrieve the model instance corresponding to the row you want to update. You can do this using the `find` method, which retrieves a model by its primary key:

use App\Models\User;

$user = User::find(1);

In this example, `User::find(1)` retrieves the `User` instance with a primary key of `1`.

Once you have your model instance, you can update its attributes and then call the `save` method to persist the changes to the database:

$user->name = 'New Name';
$user->email = 'new.email@example.com';

$user->save();

In this example, the `name` and `email` attributes of the `User` instance are updated, and then the changes are saved to the database.

You can put this code in a method in your controller. For example, you could create an `update` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function update(Request $request, $id)
    {
        $user = User::find($id);

        $user->name = $request->input('name');
        $user->email = $request->input('email');

        $user->save();

        return redirect('/users');
    }
}

In this example, the `update` method of the `UserController` retrieves a user by their ID, updates their `name` and `email` attributes with data from the request, saves the changes to the database, and then redirects the user back to the `/users` page.

Remember, when using the `save` method, Eloquent will automatically update the `updated_at` timestamp on your table. If you do not wish to have these timestamps automatically managed by Eloquent, set the `$timestamps` property on your model to `false`.

class User extends Model
{
    public $timestamps = false;
}

Showing specific data
---------------------

Here's how you can retrieve a specific row from a database table using Laravel's Eloquent ORM in a controller:

Firstly, you need to retrieve the model instance corresponding to the row you want to retrieve. You can do this using the `find` method, which retrieves a model by its primary key:

use App\Models\User;

$user = User::find(1);

In this example, `User::find(1)` retrieves the `User` instance with a primary key of `1`.

Once you have your model instance, you can access its attributes directly:

echo $user->name;
echo $user->email;

In this example, the `name` and `email` attributes of the `User` instance are printed.

You can put this code in a method in your controller. For example, you could create a `show` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function show($id)
    {
        $user = User::find($id);

        return view('user.show', ['user' => $user]);
    }
}

In this example, the `show` method of the `UserController` retrieves a user by their ID and passes it to a view.

The `view` function returns a view of the given name. In this case, it's looking for a view file located at `resources/views/user/show.blade.php`. The second parameter is an array of data that should be made available to the view. In this case, it's passing the `$user` variable to the view.

In your `resources/views/user/show.blade.php` view file, you can then display the user's data:

<h1>{{ $user->name }}</h1>
<p>{{ $user->email }}</p>

Delete specific data
--------------------

Here's how you can delete a specific row from a database table using Laravel's Eloquent ORM in a controller:

Firstly, you need to retrieve the model instance corresponding to the row you want to delete. You can do this using the `find` method, which retrieves a model by its primary key:

use App\Models\User;

$user = User::find(1);

In this example, `User::find(1)` retrieves the `User` instance with a primary key of `1`.

Once you have your model instance, you can call the `delete` method on it to delete the corresponding row from the database:

$user->delete();

In this example, the `delete` method deletes the row from the `users` table that corresponds to the `User` instance.

You can put this code in a method in your controller. For example, you could create a `destroy` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function destroy($id)
    {
        $user = User::find($id);

        $user->delete();

        return redirect('/users');
    }
}

In this example, the `destroy` method of the `UserController` retrieves a user by their ID, deletes them, and then redirects the user back to the `/users` page.

Remember, when using the `delete` method, Eloquent will not automatically update the `updated_at` timestamp on your table. If you wish to have these timestamps automatically managed by Eloquent, you should use the `softDeletes` trait on your model, which will set the `deleted_at` timestamp instead of actually deleting the row.

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Model
{
    use SoftDeletes;
}


In this example, the `User` model uses the `SoftDeletes` trait, which means that calling the `delete` method will set the `deleted_at` timestamp instead of actually deleting the row.

Restoring data
--------------

Here's how you can restore soft deleted rows in Laravel using Eloquent ORM:

Firstly, you need to use the `SoftDeletes` trait in your Eloquent model. This trait will automatically manage the `deleted_at` attribute on your model, which is used to indicate that a row has been soft deleted:

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Model
{
    use SoftDeletes;
}

In this example, the `User` model uses the `SoftDeletes` trait.

Once you have your model set up for soft deletes, you can use the `withTrashed` method to include soft deleted models in your results:

$users = User::withTrashed()->get();

In this example, `User::withTrashed()->get()` retrieves all `User` instances, including those that have been soft deleted.

To restore a soft deleted model, you can call the `restore` method on a model instance:

$user = User::withTrashed()->find(1);

$user->restore();

In this example, the `restore` method clears the `deleted_at` attribute on the `User` instance and saves it to the database.

You can put this code in a method in your controller. For example, you could create a `restore` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function restore($id)
    {
        $user = User::withTrashed()->find($id);

        $user->restore();

        return redirect('/users');
    }
}

In this example, the `restore` method of the `UserController` retrieves a user by their ID (including those that have been soft deleted), restores them, and then redirects the user back to the `/users` page.

Deleting rows permanently
-------------------------

Here's how you can permanently delete a row from a database table using Laravel's Eloquent ORM in a controller:

Firstly, you need to retrieve the model instance corresponding to the row you want to delete. You can do this using the `withTrashed` method, which retrieves both non-deleted and soft deleted models:

use App\Models\User;

$user = User::withTrashed()->find(1);

In this example, `User::withTrashed()->find(1)` retrieves the `User` instance with a primary key of `1`, including if it has been soft deleted.

Once you have your model instance, you can call the `forceDelete` method on it to permanently delete the corresponding row from the database:

$user->forceDelete();

In this example, the `forceDelete` method permanently deletes the row from the `users` table that corresponds to the `User` instance.

You can put this code in a method in your controller. For example, you could create a `forceDelete` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function forceDelete($id)
    {
        $user = User::withTrashed()->find($id);

        $user->forceDelete();

        return redirect('/users');
    }
}

In this example, the `forceDelete` method of the `UserController` retrieves a user by their ID (including those that have been soft deleted), permanently deletes them, and then redirects the user back to the `/users` page.

Remember, when using the `forceDelete` method, Eloquent will not automatically update the `updated_at` timestamp on your table. If you wish to have these timestamps automatically managed by Eloquent, you should use the `softDeletes` trait on your model, which will set the `deleted_at` timestamp instead of actually deleting the row.

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Model
{
    use SoftDeletes;
}

In this example, the `User` model uses the `SoftDeletes` trait, which means that calling the `delete` method will set the `deleted_at` timestamp instead of actually deleting the row.

One - one relationship
----------------------

Here's how you can define and use one-to-one relationships with Laravel's Eloquent ORM:

Firstly, you need to define the relationship in your Eloquent models. For example, let's say you have a `User` model and a `Phone` model, and each user has one phone. You can define this relationship like this:

In your `User` model:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    public function phone()
    {
        return $this->hasOne('App\Models\Phone');
    }
}

In your `Phone` model:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Phone extends Model
{
    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }
}

In this example, the `hasOne` method in the `User` model and the `belongsTo` method in the `Phone` model define the one-to-one relationship between users and phones.

Once you have your models set up, you can use the relationship methods to retrieve related models. For example, you can retrieve the phone associated with a user like this:

$phone = User::find(1)->phone;

In this example, `User::find(1)->phone` retrieves the `Phone` instance associated with the `User` instance with a primary key of `1`.

You can put this code in a method in your controller. For example, you could create a `showPhone` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function showPhone($id)
    {
        $phone = User::find($id)->phone;

        return view('user.phone', ['phone' => $phone]);
    }
}

In this example, the `showPhone` method of the `UserController` retrieves a user by their ID, retrieves their phone, and then passes it to a view.


Paginating results
------------------

Laravel's Eloquent ORM provides a simple way to paginate your results. Here's how you can do it:

Firstly, you need to have a model that corresponds to your table. For example, if you have a `users` table, you should have a `User` model. If you don't have one, you can create it using the `make:model` Artisan command:

php artisan make:model User

This will create a `User` model in your `app` directory.

Once you have your model, you can use the `paginate` method to retrieve a paginated result set from your table:

use App\Models\User;

$users = User::paginate(15);

In this example, `User::paginate(15)` retrieves 15 records from the `users` table and returns them as a paginated result set.

You can put this code in a method in your controller. For example, you could create an `index` method in your `UserController`:

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function index()
    {
        $users = User::paginate(15);

        return view('user.index', ['users' => $users]);
    }
}

In this example, the `index` method of the `UserController` retrieves a paginated list of users and passes them to a view.

In your view, you can then display the users and the pagination links:

@foreach ($users as $user)
    <p>{{ $user->name }}</p>
@endforeach

{{ $users->links() }}

In this example, the `links` method generates the HTML for the pagination links.

Middleware
==========

Middleware provides a convenient mechanism for filtering HTTP requests entering your application. Here are the steps:

1. **Create a Middleware**
    Laravel includes an Artisan command that makes it incredibly easy to create a new middleware. Simply run the `make:middleware` command and provide the name of the middleware that you would like to create. Artisan will automatically place the new middleware file in the `app/Http/Middleware` directory:

    php artisan make:middleware CheckAge

2. **Define Middleware**
    A middleware is defined in the file that was created by the Artisan command. Here is an example of a CheckAge middleware:

    <?php

    namespace App\Http\Middleware;

    use Closure;

    class CheckAge
    {
        /**
         * Handle an incoming request.
         *
         * @param  \Illuminate\Http\Request  $request
         * @param  \Closure  $next
         * @return mixed
         */
        public function handle($request, Closure $next)
        {
            if ($request->age <= 200) {
                return redirect('home');
            }

            return $next($request);
        }
    }

3. **Register Middleware**
    Once the middleware has been defined, you are ready to register it with the application. All middleware are registered within the `app/Http/Kernel.php` class.

    - **Global Middleware**: If you want a middleware to be run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class.

    - **Assigning Middleware to Routes**: If you would like to assign middleware to specific routes, you should first assign the middleware a key in your `app/Http/Kernel.php` file. By default, the `$routeMiddleware` property of this class contains entries for the middleware included with Laravel. To add your own, simply append it to this list and assign it a key of your choosing. For example:

    // Within App\Http\Kernel Class...

    protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'age' => \App\Http\Middleware\CheckAge::class,
        // Other middleware...
    ];


    Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:

    Route::get('admin/profile', function () {
        //
    })->middleware('age');

GLobal middleware
-----------------

Global middleware will run on every HTTP request that your application receives.

Here are the steps:

1. **Create a Middleware**
    Laravel includes an Artisan command that makes it incredibly easy to create a new middleware. Simply run the `make:middleware` command and provide the name of the middleware that you would like to create. Artisan will automatically place the new middleware file in the `app/Http/Middleware` directory:

    php artisan make:middleware CheckIpAddress

2. **Define Middleware**
    A middleware is defined in the file that was created by the Artisan command. Here is an example of a CheckIpAddress middleware:

    <?php

    namespace App\Http\Middleware;

    use Closure;

    class CheckIpAddress
    {
        /**
         * Handle an incoming request.
         *
         * @param  \Illuminate\Http\Request  $request
         * @param  \Closure  $next
         * @return mixed
         */
        public function handle($request, Closure $next)
        {
            if ($request->ip() != '123.456.789.000') {
                return response('Unauthorized.', 401);
            }

            return $next($request);
        }
    }

3. **Register Middleware**
    Once the middleware has been defined, you are ready to register it with the application. All middleware are registered within the `app/Http/Kernel.php` class.

    - **Global Middleware**: If you want a middleware to be run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class.

    // Within App\Http\Kernel Class...

    protected $middleware = [
        // Other Middleware...
        \App\Http\Middleware\CheckIpAddress::class,
    ];

    Now, the `CheckIpAddress` middleware will be run on every request to your application.

Group middleware
----------------

Middleware groups allow you to group several route middleware under a single key, allowing you to assign several middleware to a route at once. 

Here are the steps:

1. **Create Middlewares**
    First, you need to create the middlewares that you want to group. You can create a middleware using the Artisan command:

    php artisan make:middleware FirstMiddleware
    php artisan make:middleware SecondMiddleware

2. **Define Middlewares**
    A middleware is defined in the file that was created by the Artisan command. Here is an example of a simple middleware:

    <?php

    namespace App\Http\Middleware;

    use Closure;

    class FirstMiddleware
    {
        public function handle($request, Closure $next)
        {
            // Perform action

            return $next($request);
        }
    }

    Do the same for the SecondMiddleware.

3. **Register Middleware**
    Once the middleware has been defined, you are ready to register it with the application. All middleware are registered within the `app/Http/Kernel.php` class. Add your middleware to the `$routeMiddleware` array.

    // Within App\Http\Kernel Class...

    protected $routeMiddleware = [
        'first' => \App\Http\Middleware\FirstMiddleware::class,
        'second' => \App\Http\Middleware\SecondMiddleware::class,
        // Other middleware...
    ];

4. **Define Middleware Group**
    Middleware groups are defined in the same `Kernel.php` file. You can add your middleware to an existing group or create a new group. Here's how you can create a new group:

    // Within App\Http\Kernel Class...

    protected $middlewareGroups = [
        'web' => [
           // Other middleware...
        ],

        'api' => [
           // Other middleware...
        ],

        'custom' => [
            'first',
            'second',
        ],
    ];

5. **Assign Middleware Group to Routes**
    Once the middleware group has been defined, you can assign it to routes using the group key:

    Route::middleware(['custom'])->group(function () {
        Route::get('/admin', function () {
            // Uses first and second Middleware
        });
    });

Route middleware
----------------

Route middleware is used to allow or prevent access to specific routes in your application.

Here are the steps:

1. **Create a Middleware**
    Laravel includes an Artisan command that makes it incredibly easy to create a new middleware. Simply run the `make:middleware` command and provide the name of the middleware that you would like to create. Artisan will automatically place the new middleware file in the `app/Http/Middleware` directory:

    php artisan make:middleware CheckRole

2. **Define Middleware**
    A middleware is defined in the file that was created by the Artisan command. Here is an example of a CheckRole middleware:

    <?php

    namespace App\Http\Middleware;

    use Closure;

    class CheckRole
    {
        /**
         * Handle an incoming request.
         *
         * @param  \Illuminate\Http\Request  $request
         * @param  \Closure  $next
         * @return mixed
         */
        public function handle($request, Closure $next)
        {
            if (! $request->user()->hasRole('editor')) {
                // Redirect...
                return redirect('home');
            }

            return $next($request);
        }
    }

3. **Register Middleware**
    Once the middleware has been defined, you are ready to register it with the application. All middleware are registered within the `app/Http/Kernel.php` class. Add your middleware to the `$routeMiddleware` array.

    // Within App\Http\Kernel Class...

    protected $routeMiddleware = [
        'role' => \App\Http\Middleware\CheckRole::class,
        // Other middleware...
    ];

4. **Assign Middleware to Routes**
    Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:

    Route::get('/post/{id}', function ($id) {
        //
    })->middleware('role');

Controller middleware
---------------------

Sure, I can guide you on how to use middleware in a Laravel controller. Middleware can be assigned to the controller's routes in your route files. However, it is more convenient to specify middleware within your controller's constructor. Here are the steps:

1. **Create a Middleware**
    Laravel includes an Artisan command that makes it incredibly easy to create a new middleware. Simply run the `make:middleware` command and provide the name of the middleware that you would like to create. Artisan will automatically place the new middleware file in the `app/Http/Middleware` directory:

    php artisan make:middleware CheckRole

2. **Define Middleware**
    A middleware is defined in the file that was created by the Artisan command. Here is an example of a CheckRole middleware:

    <?php

    namespace App\Http\Middleware;

    use Closure;

    class CheckRole
    {
        public function handle($request, Closure $next)
        {
            if (! $request->user()->hasRole('editor')) {
                // Redirect...
                return redirect('home');
            }

            return $next($request);
        }
    }

3. **Register Middleware**
    Once the middleware has been defined, you are ready to register it with the application. All middleware are registered within the `app/Http/Kernel.php` class. Add your middleware to the `$routeMiddleware` array.

    // Within App\Http\Kernel Class...

    protected $routeMiddleware = [
        'role' => \App\Http\Middleware\CheckRole::class,
        // Other middleware...
    ];

4. **Assign Middleware to Controller**
    Middleware can be assigned to the controller within the controller's constructor. Using the `middleware` method from the controller's constructor, you can easily assign middleware to the controller's action. Here's an example:

    <?php

    namespace App\Http\Controllers;

    use Illuminate\Http\Request;

    class UserController extends Controller
    {
        /**
         * Instantiate a new UserController instance.
         *
         * @return void
         */
        public function __construct()
        {
            $this->middleware('role');
        }
    }

    In this example, the `role` middleware will be applied to all routes handled by the controller. If you want to assign middleware to specific methods on the controller, you may pass an array of method names to the `only` method:

    $this->middleware('role')->only('index');

    You can also exclude middleware from certain methods using the `except` method:

    $this->middleware('role')->except('show');

Blade components
================

Blade components in Laravel 10 provide a way to encapsulate sections of your view into reusable chunks. Here's a step-by-step guide on how to use them:

**1. Creating a Component**

There are two ways to create a component in Laravel:

- **Class-based Component**: You can create a class-based component using the Artisan command as follows:

php artisan make:component AlertMessage

This command will create two files: `app\View\Components\AlertMessage.php` and `resources\views\components\alert-message.blade.php`.

- **Blade Component**: You can also create a new Blade component file named `notification.blade.php` in the `resources/views/components` directory.

Rendering Blade components
--------------------------

Rendering Blade components in Laravel 10 is quite straightforward. Here's how you can do it:

**1. Using a Component**

You can use a component in any Blade view by using the `<x>` directive. For example, if you have a component named `Button`, you can use it in a Blade view as follows:

<x-button />

**2. Passing Data to a Component**

You can pass data to a component as an array in the second argument to the component directive. For example, if you want to pass a `type` and `message` to an `AlertMessage` component, you can do it as follows:

<x-alert-message :type="$type" :message="$message" />

In this example, `$type` and `$message` are variables available in the current Blade view.

**3. Using Slots**

Slots allow you to inject content into different parts of the component's view. A component's view can contain one or more slots. Here's an example of how to define a slot in a component's view:

<!-- /resources/views/components/alert.blade.php -->
<div class="alert alert-danger">
    <div class="alert-title">{{ $title }}</div>

    {{ $slot }}
</div>

In this example, `{{ $title }}` is a variable passed to the component, and `{{ $slot }}` is the content that will be injected into the component when it's used. Here's how to use this component with a slot:

<x-alert title="Error">
    Something went wrong!
</x-alert>

In this example, "Something went wrong!" is the content that gets injected into the `{{ $slot }}` placeholder in the component's view.

**4. Using Named Slots**

Named slots allow you to inject content into specific parts of the component's view. Here's an example of how to define named slots in a component's view:

<!-- /resources/views/components/alert.blade.php -->
<div class="alert alert-danger">
    <div class="alert-title">{{ $title }}</div>

    {{ $slot }}

    <div class="alert-footer">
        {{ $footer }}
    </div>
</div>

In this example, `{{ $footer }}` is a named slot. Here's how to use this component with a named slot:

<x-alert title="Error">
    Something went wrong!

    <x-slot name="footer">
        Please try again.
    </x-slot>
</x-alert>


In this example, "Please try again." is the content that gets injected into the `{{ $footer }}` placeholder in the component's view.


Passing data in components
--------------------------

Passing data to components in Laravel 10 is a straightforward process. Here's how you can do it:

**1. Passing Data to Components**

You can pass data to a component using HTML attributes. For example, if you have a component named `AlertMessage`, you can pass a `message` to it as follows:

<x-alert-message :message="$message" />

In this example, `$message` is a variable available in the current Blade view.

**2. Passing Multiple Data to Components**

You can pass multiple data to a component by adding more attributes. For example, if you want to pass a `type` and `message` to an `AlertMessage` component, you can do it as follows:

<x-alert-message :type="$type" :message="$message" />

In this example, `$type` and `$message` are variables available in the current Blade view.

**3. Passing Data to Class-Based Components**

If you're using a class-based component, you can pass data to it through the constructor. For example, if you have a `AlertMessage` component, you can pass a `message` to it as follows:

<?php

namespace App\View\Components;

use Illuminate\View\Component;

class AlertMessage extends Component
{
    public $message;

    public function __construct($message)
    {
        $this->message = $message;
    }

    public function render()
    {
        return view('components.alert-message');
    }
}

In this example, the `message` is passed to the `AlertMessage` component through the constructor and is available in the component's view as `$message`.

**4. Passing Array Data to Components**

You can also pass an array to your component. For example:

<x-breadcrumbs :breadcrumbs="$breadcrumbs"/>


In this example, `$breadcrumbs` is an array variable available in the current Blade view.


Component slots
---------------

Slots in Laravel 10 components are a powerful feature that allows you to inject content into different parts of a component's view. Here's how you can use them:

**1. Defining a Slot**

You can define a slot in your component's view using the `{{ $slot }}` directive. For example, if you have a component named `Alert`, you can define a slot in its view as follows:

<!-- /resources/views/components/alert.blade.php -->
<div class="alert">
    {{ $slot }}
</div>

In this example, `{{ $slot }}` is a placeholder for the content that you will inject into the component when you use it.

**2. Using a Slot**

You can inject content into a slot when you use a component. For example, you can use the `Alert` component and inject a message into its slot as follows:

<x-alert>
    This is an alert message!
</x-alert>

In this example, "This is an alert message!" is the content that gets injected into the `{{ $slot }}` placeholder in the `Alert` component's view.

**3. Named Slots**

Named slots allow you to inject content into specific parts of a component's view. You can define a named slot using the `@slot` directive. For example, you can define a `title` slot in the `Alert` component's view as follows:

<!-- /resources/views/components/alert.blade.php -->
<div class="alert">
    <div class="alert-title">{{ $title }}</div>

    {{ $slot }}
</div>

In this example, `{{ $title }}` is a named slot. You can inject content into this slot when you use the `Alert` component as follows:

<x-alert>
    @slot('title')
        Error
    @endslot

    This is an error message!
</x-alert>


In this example, "Error" is the content that gets injected into the `{{ $title }}` placeholder in the `Alert` component's view, and "This is an error message!" is the content that gets injected into the `{{ $slot }}` placeholder.

These are the basic steps to use slots in Laravel 10 components. For more complex use cases, you might want to look into component attributes and conditional rendering.


Store data in Blade files
-------------------------

In Laravel, you typically don't store data directly in Blade files. Instead, you pass data from your controllers to your Blade views, which then display the data. Here's how you can do it:

**1. Using Compact()**

The `compact()` function is a convenient way to pass multiple pieces of data to a view. Here's an example:

public function show($id)
{
    $product = Product::find($id);
    return view('product.show', compact('product'));
}

In this example, the `Product::find($id)` is used to retrieve a product from the database, and the `compact('product')` is used to pass this product to the `product.show` view.

**2. Using With()**

The `with()` method provides another way to pass data to a view. Here's an example:

public function show($id)
{
    $product = Product::find($id);
    return view('product.show')->with('product', $product);
}

In this example, the `with('product', $product)` is used to pass the product to the `product.show` view.

**3. Using an Array**

You can also pass an array of data to a view. Here's an example:

public function show($id)
{
    $product = Product::find($id);
    return view('product.show', ['product' => $product]);
}

In this example, the array `['product' => $product]` is used to pass the product to the `product.show` view.

In your Blade file, you can then access the data like so:

<h1>{{ $product->name }}</h1>
<p>{{ $product->description }}</p>

In this example, `{{ $product->name }}` and `{{ $product->description }}` are used to display the product's name and description.

Sending Mail
============

Mail trap configuration
-----------------------

Sure, here's how you can configure Mailtrap in Laravel 10:

**1. Create a Mailtrap Account**

First, you need to create an account on [Mailtrap](https://mailtrap.io/). After signing up, create a new inbox. Mailtrap will provide you with SMTP settings, including the host, port, username, and password¹.

**2. Configure .env File**

Next, you need to update your `.env` file in your Laravel project with the SMTP settings provided by Mailtrap¹². Here's an example of how to do this:

```bash
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=your_mailtrap_username
MAIL_PASSWORD=your_mailtrap_password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=example@example.com
MAIL_FROM_NAME="${APP_NAME}"
```

In this example, replace `your_mailtrap_username` and `your_mailtrap_password` with your actual Mailtrap SMTP username and password¹².

**3. Send a Test Email**

Now that you've configured Mailtrap, you can send a test email to verify that everything is working correctly. You can do this by creating a mailable class using the `make:mail` Artisan command and defining a route that sends an email using this mailable class¹.

That's it! Now, every time you send an email in your Laravel application during development, it will be sent to your Mailtrap inbox instead of the actual recipient. This allows you to view and inspect the emails in a safe and isolated environment¹.

Sending simple mail 
-------------------

Sure, here's how you can send a simple email in Laravel 10:

**1. Create a Mailable**

First, you need to create a mailable class. This class will represent the email you're going to send. You can create a mailable class using the `make:mail` Artisan command¹:

```bash
php artisan make:mail SampleEmail
```

This command will create a new class at `app\Mail\SampleEmail.php`.

**2. Write the Mailable**

Next, you need to write the content of the email in the mailable class. Here's an example of how to do this¹:

```php
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class SampleEmail extends Mailable
{
    use Queueable, SerializesModels;

    public function build()
    {
        return $this->view('emails.sample');
    }
}
```

In this example, the `view('emails.sample')` method is used to specify the Blade view that should be used as the content of the email.

**3. Create the Email View**

Then, you need to create the Blade view that will be used as the content of the email. You can create this view at `resources\views\emails\sample.blade.php`. Here's an example of what this view might look like¹:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Sample Email</title>
</head>
<body>
    <h1>Sample Email</h1>
    <p>This is a sample email sent from Laravel.</p>
</body>
</html>
```

**4. Send the Email**

Finally, you can send the email using the `Mail` facade's `send` method. Here's an example of how to do this¹:

```php
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Mail;
use App\Mail\SampleEmail;

Route::get('/send-email', function () {
    Mail::to('recipient@example.com')->send(new SampleEmail());

    return "Email sent successfully!";
});
```

In this example, the `Mail::to('recipient@example.com')->send(new SampleEmail());` line is used to send an email to `recipient@example.com` using the `SampleEmail` mailable class¹.

That's it! Now, every time you visit the `/send-email` route in your Laravel application, it will send a sample email¹.

Sending view as email body
--------------------------

Sure, here's how you can send an email with a view as the body in Laravel 10:

**1. Create a Mailable**

First, you need to create a mailable class. This class will represent the email you're going to send. You can create a mailable class using the `make:mail` Artisan command¹:

```bash
php artisan make:mail SampleEmail
```

This command will create a new class at `app\Mail\SampleEmail.php`.

**2. Write the Mailable**

Next, you need to write the content of the email in the mailable class. Here's an example of how to do this¹:

```php
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class SampleEmail extends Mailable
{
    use Queueable, SerializesModels;

    public function build()
    {
        return $this->view('emails.sample');
    }
}
```

In this example, the `view('emails.sample')` method is used to specify the Blade view that should be used as the content of the email.

**3. Create the Email View**

Then, you need to create the Blade view that will be used as the content of the email. You can create this view at `resources\views\emails\sample.blade.php`. Here's an example of what this view might look like¹:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Sample Email</title>
</head>
<body>
    <h1>Sample Email</h1>
    <p>This is a sample email sent from Laravel.</p>
</body>
</html>
```

**4. Send the Email**

Finally, you can send the email using the `Mail` facade's `send` method. Here's an example of how to do this¹:

```php
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Mail;
use App\Mail\SampleEmail;

Route::get('/send-email', function () {
    Mail::to('recipient@example.com')->send(new SampleEmail());

    return "Email sent successfully!";
});
```

In this example, the `Mail::to('recipient@example.com')->send(new SampleEmail());` line is used to send an email to `recipient@example.com` using the `SampleEmail` mailable class¹.

Attaching Files to email
------------------------

Sure, here's how you can attach files to an email in Laravel 10:

**1. Create a Mailable**

First, you need to create a mailable class. This class will represent the email you're going to send. You can create a mailable class using the `make:mail` Artisan command¹:

```bash
php artisan make:mail MailWithAttachment
```

This command will create a new class at `app\Mail\MailWithAttachment.php`.

**2. Write the Mailable**

Next, you need to write the content of the email in the mailable class. Here's an example of how to do this¹:

```php
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class MailWithAttachment extends Mailable
{
    use Queueable, SerializesModels;

    public $data;

    public function __construct($data)
    {
        $this->data = $data;
    }

    public function build()
    {
        return $this->view('emails.sample')
                    ->attach($this->data['attachment']);
    }
}
```

In this example, the `attach($this->data['attachment'])` method is used to attach a file to the email. The `$this->data['attachment']` should be the full path to the file you want to attach¹.

**3. Send the Email**

Finally, you can send the email using the `Mail` facade's `send` method. Here's an example of how to do this¹:

```php
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Mail;
use App\Mail\MailWithAttachment;

Route::get('/send-email', function () {
    $data = [
        'attachment' => storage_path('app/public/sample.pdf')
    ];

    Mail::to('recipient@example.com')->send(new MailWithAttachment($data));

    return "Email sent successfully!";
});
```

In this example, the `Mail::to('recipient@example.com')->send(new MailWithAttachment($data));` line is used to send an email to `recipient@example.com` using the `MailWithAttachment` mailable class¹.

That's it! Now, every time you visit the `/send-email` route in your Laravel application, it will send an email with an attachment¹.

Http session
============

Retrieving data from session
----------------------------

Sure, here's how you can retrieve data from a session in Laravel 10:

**1. Using the `session()` Helper**

The `session()` helper function provides a convenient way to get data from the session. Here's an example¹:

```php
$value = session('key');
```

In this example, `'key'` is the key of the data you want to retrieve from the session. The `session('key')` will return the value of the data stored in the session with the key `'key'`¹.

**2. Using the `get()` Method**

You can also use the `get()` method on a `Request` instance to retrieve data from the session. Here's an example¹:

```php
public function show(Request $request, $id)
{
    $value = $request->session()->get('key');
}
```

In this example, `$request->session()->get('key')` will return the value of the data stored in the session with the key `'key'`¹.

**3. Providing a Default Value**

If you're not sure whether a certain item is available in the session, you can pass a default value to the `get()` method or the `session()` helper function. This value will be returned if the specified key does not exist in the session¹. Here's an example:

```php
$value = session('key', 'default');
```

In this example, `'default'` is the default value that will be returned if `'key'` does not exist in the session¹.


Storing data from session
-------------------------

Sure, here's how you can store data in a session in Laravel 10:

**1. Using the `session()` Helper**

The `session()` helper function provides a convenient way to store data in the session. Here's an example¹:

```php
// Store data in the session
session(['key' => 'value']);
```

In this example, `'key'` is the key under which the data `'value'` is stored in the session¹.

**2. Using the `put()` Method**

You can also use the `put()` method on a `Request` instance to store data in the session. Here's an example¹:

```php
public function store(Request $request)
{
    $request->session()->put('key', 'value');
}
```

In this example, `$request->session()->put('key', 'value')` is used to store the data `'value'` in the session with the key `'key'`¹.

**3. Storing Array Data**

You can store an array of data in the session. Here's an example¹:

```php
// Store array data in the session
session(['key' => ['item1', 'item2']]);
```

In this example, `'key'` is the key under which the array `['item1', 'item2']` is stored in the session¹.

Deleting data from session
--------------------------

Sure, here's how you can delete data from a session in Laravel 10:

**1. Using the `session()` Helper**

The `session()` helper function provides a convenient way to delete data from the session. Here's an example³:

```php
// Delete a specific key from the session
session()->forget('key');
```

In this example, `'key'` is the key of the data you want to delete from the session³.

**2. Using the `forget()` Method**

You can also use the `forget()` method on a `Request` instance to delete data from the session. Here's an example¹:

```php
public function delete(Request $request)
{
    $request->session()->forget('key');
}
```

In this example, `$request->session()->forget('key')` is used to delete the data stored in the session with the key `'key'`¹.

**3. Deleting All Data From The Session**

If you want to delete all data from the session, you can use the `flush()` method¹:

```php
// Delete all data from the session
session()->flush();
```

Or, if you're inside a controller method¹:

```php
public function deleteAll(Request $request)
{
    $request->session()->flush();
}
```


Flash session data
------------------

Flashing data to the session in Laravel 10 is a way to store data in the session only for the next request. This is particularly useful for storing status messages or other one-time use data. Here's how you can do it:

**1. Using the `session()` Helper**

The `session()` helper function provides a convenient way to flash data to the session. Here's an example³:

```php
// Flash data to the session
session()->flash('key', 'value');
```

In this example, `'key'` is the key under which the data `'value'` is flashed to the session³.

**2. Using the `flash()` Method**

You can also use the `flash()` method on a `Request` instance to flash data to the session. Here's an example¹:

```php
public function store(Request $request)
{
    $request->session()->flash('key', 'value');
}
```

In this example, `$request->session()->flash('key', 'value')` is used to flash the data `'value'` to the session with the key `'key'`¹.

**3. Flashing Array Data**

You can flash an array of data to the session. Here's an example³:

```php
// Flash array data to the session
session()->flash('key', ['item1', 'item2']);
```

In this example, `'key'` is the key under which the array `['item1', 'item2']` is flashed to the session³.

Cache
=====

Difference b/w cache & session
------------------------------
In Laravel, both sessions and cache are used to store data, but they serve different purposes and have different characteristics:

**Session:**

- A session is a way to store information to be used across multiple pages³.
- Session data is stored on a per-user basis. It's a way to remember the user's activity from page to page by storing user information on the server for later use³.
- For example, if a user is logged in, you can store that information in the session and use it to determine if the user is authenticated on subsequent requests³.
- Session data is temporary and is deleted when the user closes the browser or after a certain period of inactivity³.

Here's an example of how to store data in a session in Laravel³:

```php
// Store data in the session
session(['key' => 'value']);
```

And here's how to retrieve data from a session³:

```php
// Retrieve data from the session
$value = session('key');
```

**Cache:**

- The cache is a way to store data that can be retrieved faster than if it were accessed directly¹.
- Cache data is not tied to a specific user. It's a way to store data that is expensive to retrieve or generate, such as the results of a database query or a complex calculation¹.
- Unlike session data, cache data is not automatically deleted when the user closes the browser. It's deleted when it expires, when it's manually deleted, or when the cache is cleared¹.
- Laravel provides a unified API for various caching systems. The cache configuration is located at `config/cache.php`¹.

Here's an example of how to store data in the cache in Laravel¹:

```php
use Illuminate\Support\Facades\Cache;

// Store data in the cache
Cache::put('key', 'value', $seconds);
```

And here's how to retrieve data from the cache¹:

```php
use Illuminate\Support\Facades\Cache;

// Retrieve data from the cache
$value = Cache::get('key');
```

In summary, while both sessions and cache can be used to store data, sessions are typically used to store user-specific data across multiple pages, while cache is used to store data that is expensive to generate or retrieve and is not user-specific¹³.

Installing debugbar
-------------------
Sure, here's how you can install and set up Laravel Debugbar in Laravel 10:

**1. Install Laravel Debugbar Package**

Open terminal and navigate to the project's root directory. Install the package by running the following command¹:

```bash
composer require barryvdh/laravel-debugbar --dev
```

This command will install the Laravel Debugbar package as a development dependency¹.

**2. Register the Debugbar Service Provider**

Open the `config/app.php` file in your project. Locate the `providers` array. Add the service provider class in the array¹:

```php
'providers' => [
    ...
    Barryvdh\Debugbar\ServiceProvider::class,
]
```

**3. Publish the Configuration (optional)**

You can generate a `debugbar.php` configuration file in the `config` directory by running this command¹:

```bash
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"
```

**4. Verify the Installation**

Now, you should be able to see a debug bar at the bottom of your application when you're in the local environment. This debug bar will provide you with a wealth of information about what's happening in your application¹.

Storing data in cache
---------------------
In Laravel 10, you can store data in the cache using various methods. Here's how you can do it:

**1. Using the `put()` Method**

The `put()` method allows you to store an item in the cache for a specified number of seconds¹. Here's an example:

```php
use Illuminate\Support\Facades\Cache;

// Store an item in the cache for 10 seconds
Cache::put('key', 'value', 10);
```

In this example, `'key'` is the key under which the data `'value'` is stored in the cache for 10 seconds¹.

**2. Using the `remember()` Method**

The `remember()` method allows you to retrieve an item from the cache or store it if it doesn't exist¹. Here's an example:

```php
use Illuminate\Support\Facades\Cache;

$value = Cache::remember('users', $seconds, function () {
    return DB::table('users')->get();
});
```

In this example, if there's no item in the cache with the key `'users'`, the closure passed as the third argument to the `remember()` method will be executed and its result will be stored in the cache under the key `'users'`¹.

**3. Using the `forever()` Method**

The `forever()` method allows you to store an item in the cache indefinitely¹. Here's an example:

```php
use Illuminate\Support\Facades\Cache;

// Store an item in the cache indefinitely
Cache::forever('key', 'value');
```

In this example, `'key'` is the key under which the data `'value'` is stored in the cache indefinitely¹.

Storing data in cache forever
-----------------------------
In Laravel 10, you can store data in the cache indefinitely using the `forever()` method. Here's how you can do it:

**1. Using the `forever()` Method**

The `forever()` method allows you to store an item in the cache indefinitely¹. Here's an example:

```php
use Illuminate\Support\Facades\Cache;

// Store an item in the cache indefinitely
Cache::forever('key', 'value');
```

In this example, `'key'` is the key under which the data `'value'` is stored in the cache indefinitely¹.

**2. Using the `rememberForever()` Method**

The `rememberForever()` method allows you to retrieve an item from the cache or store it indefinitely if it doesn't exist³. Here's an example:

```php
use Illuminate\Support\Facades\Cache;

$value = Cache::rememberForever('users', function () {
    return DB::table('users')->get();
});
```

In this example, if there's no item in the cache with the key `'users'`, the closure passed as the second argument to the `rememberForever()` method will be executed and its result will be stored in the cache indefinitely under the key `'users'`³.

These are the basic steps to store data in the cache indefinitely in Laravel 10¹³. For more complex use cases, you might want to look into tagged cache and cache stores¹.


Remove data in cache
--------------------

In Laravel 10, you can remove data from the cache using various methods. Here's how you can do it:

**1. Using the `forget()` Method**

The `forget()` method allows you to remove a specific item from the cache. Here's an example¹:

```php
use Illuminate\Support\Facades\Cache;

// Remove a specific item from the cache
Cache::forget('key');
```

In this example, `'key'` is the key of the item you want to remove from the cache¹.

**2. Using the `flush()` Method**

The `flush()` method allows you to clear the entire cache. Here's an example¹:

```php
use Illuminate\Support\Facades\Cache;

// Clear the entire cache
Cache::flush();
```

This command will remove all items from the cache¹.

**3. Using Artisan Commands**

You can also use Artisan commands to clear various types of cached data in Laravel⁴:

- **Configuration Cache**: You can clear the configuration cache using the `config:clear` command⁴:

    ```bash
    php artisan config:clear
    ```

- **Route Cache**: You can clear the route cache using the `route:clear` command⁴:

    ```bash
    php artisan route:clear
    ```

- **View Cache**: You can clear the compiled view files using the `view:clear` command⁴:

    ```bash
    php artisan view:clear
    ```

- **Application Cache**: You can clear the application cache using the `cache:clear` command⁴:

    ```bash
    php artisan cache:clear
    ```

Using cache with pagination
---------------------------

In Laravel 10, you can use caching with pagination to improve the performance of your application. Here's how you can do it:

**1. Fetching Data with Pagination**

First, you need to fetch data with pagination. Here's an example³:

```php
use Illuminate\Support\Facades\Cache;

public function index()
{
    $currentPage = request()->get('page', 1);
    $limit = request()->get('limit', 10);

    $users = Cache::remember('users_page_' . $currentPage, 60, function () use ($limit) {
        return DB::table('users')->paginate($limit);
    });

    return view('users.index', compact('users'));
}
```

In this example, the `DB::table('users')->paginate($limit)` is used to fetch users from the database with pagination³.

**2. Caching the Paginated Data**

Next, you use the `Cache::remember()` method to cache the paginated data. The `Cache::remember()` method takes three arguments: the cache key, the number of minutes to store the data, and a closure that returns the data to be cached³.

In this example, `'users_page_' . $currentPage` is the cache key, `60` is the number of minutes to store the data, and the closure returns the paginated data³.

This way, the paginated data is cached for each page. When a user visits a page, Laravel first checks if the data for that page is in the cache. If it is, Laravel retrieves the data from the cache instead of the database, which can significantly improve the performance of your application³.
.
